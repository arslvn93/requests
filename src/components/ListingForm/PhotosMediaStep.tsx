import React, { useState, useRef, useEffect } from 'react';
import { Camera, Upload, X, Image as ImageIcon, Video, Star, Loader2, AlertCircle, CheckCircle } from 'lucide-react';
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3"; // Import S3
import { v4 as uuidv4 } from 'uuid'; // Import UUID

// Assuming FormData and PhotoUploadInfo are defined in ListingForm.tsx and imported
// We need to import them or redefine PhotoUploadInfo here if not passed explicitly
// For now, let's assume they are available via props or context, or define PhotoUploadInfo locally
interface PhotoUploadInfo {
  id: string; // Unique ID for this photo instance
  file: File; // The original file object
  status: 'pending' | 'uploading' | 'success' | 'error';
  s3Key?: string; // Key in S3 bucket after successful upload
  s3Url?: string; // URL after successful upload
  error?: string; // Error message if upload failed
  previewUrl: string; // URL generated by URL.createObjectURL for preview
}

interface PhotosMediaData { // Renamed from PhotosMediaInfo for clarity
  uploads: PhotoUploadInfo[];
  featuredPhotoId: string | null;
  virtualTourUrl?: string;
  videoUrl?: string;
}

interface PhotosMediaStepProps {
  // Pass the relevant part of formData and a way to update it
  value: PhotosMediaData;
  listingId: string | null; // Pass listingId
  onChange: (value: PhotosMediaData) => void; // To update photosMedia part of state
  onListingIdChange: (id: string) => void; // To update listingId in parent state
  onNext: () => void;
}

// S3 Client Configuration (Should ideally be initialized once, maybe passed via props/context)
// Duplicating here for simplicity, but avoid this in real apps.
const s3Client = new S3Client({
  region: import.meta.env.VITE_AWS_REGION,
  credentials: {
    accessKeyId: import.meta.env.VITE_AWS_ACCESS_KEY_ID,
    secretAccessKey: import.meta.env.VITE_AWS_SECRET_ACCESS_KEY,
  },
});
const bucketName = import.meta.env.VITE_S3_BUCKET;
const awsRegion = import.meta.env.VITE_AWS_REGION;


const PhotosMediaStep: React.FC<PhotosMediaStepProps> = ({
  value,
  listingId,
  onChange,
  onListingIdChange,
  onNext
}) => {
  const [focusedField, setFocusedField] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // --- S3 Upload Logic ---
  const uploadPhoto = async (photoInfo: PhotoUploadInfo, currentListingId: string) => {
    // Update status to 'uploading' in parent state
    onChange({
      ...value,
      uploads: value.uploads.map(p =>
        p.id === photoInfo.id ? { ...p, status: 'uploading' } : p
      ),
    });

    const sanitizedFilename = photoInfo.file.name.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9._-]/g, '');
    // Use photoInfo.id for uniqueness in the key
    const key = `listings/${currentListingId}/${photoInfo.id}-${sanitizedFilename}`;
    try {
      // Read the file content into an ArrayBuffer first
      const fileBuffer = await photoInfo.file.arrayBuffer();

      const commandInput = {
        Bucket: bucketName,
        Key: key,
        Body: fileBuffer, // Pass the ArrayBuffer as the Body
        ContentType: photoInfo.file.type,
        ACL: 'public-read' as const,
      };
      console.log(`Attempting S3 upload for key: ${key} with ContentType: ${commandInput.ContentType}`);
      const command = new PutObjectCommand(commandInput);

      console.log("Sending command to S3...");
      await s3Client.send(command);
      const url = `https://${bucketName}.s3.${awsRegion}.amazonaws.com/${key}`;
      console.log(`Successfully uploaded ${key} to ${url}`);
      // Update status to 'success' and store URL/Key
      onChange({
        ...value,
        uploads: value.uploads.map(p =>
          p.id === photoInfo.id ? { ...p, status: 'success', s3Url: url, s3Key: key, error: undefined } : p
        ),
      });
    } catch (error: any) {
      console.error(`Failed to upload ${key}:`, error);
      // Update status to 'error' and store error message
      onChange({
        ...value,
        uploads: value.uploads.map(p =>
          p.id === photoInfo.id ? { ...p, status: 'error', error: error.message || 'Upload failed' } : p
        ),
      });
    }
  };
  // --- End S3 Upload Logic ---

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const validFiles = files.filter(file => file.type.startsWith('image/'));

    if (validFiles.length === 0) return;

    let currentListingId = listingId;
    // Generate listingId if it doesn't exist yet (first photo upload)
    if (!currentListingId) {
      currentListingId = uuidv4();
      onListingIdChange(currentListingId); // Update parent state
    }

    const newUploads: PhotoUploadInfo[] = validFiles.map(file => ({
      id: uuidv4(), // Unique ID for each photo upload instance
      file: file,
      status: 'pending',
      previewUrl: URL.createObjectURL(file), // Create preview URL immediately
    }));

    // Update parent state with new pending uploads
    const updatedUploads = [...value.uploads, ...newUploads];
    onChange({ ...value, uploads: updatedUploads });

    // Trigger uploads for the newly added photos
    newUploads.forEach(photoInfo => {
      uploadPhoto(photoInfo, currentListingId as string); // We know it's defined now
    });

     // Clear the file input value to allow selecting the same file again
     if (fileInputRef.current) {
        fileInputRef.current.value = '';
     }
  };

  const removePhoto = (idToRemove: string) => {
    const photoToRemove = value.uploads.find(p => p.id === idToRemove);
    if (photoToRemove) {
      URL.revokeObjectURL(photoToRemove.previewUrl); // Clean up preview URL
      // TODO: Optionally add S3 delete logic here if needed using photoToRemove.s3Key
    }

    const newUploads = value.uploads.filter(p => p.id !== idToRemove);
    // If the removed photo was featured, set the first available successful photo as featured, or null if none exist
    let newFeaturedId = value.featuredPhotoId;
    if (value.featuredPhotoId === idToRemove) {
        const firstSuccessful = newUploads.find(p => p.status === 'success');
        newFeaturedId = firstSuccessful ? firstSuccessful.id : null;
    }


    onChange({ ...value, uploads: newUploads, featuredPhotoId: newFeaturedId });
  };

  const setFeaturedPhoto = (idToFeature: string) => {
    // Only allow setting featured if the photo upload was successful
    const photo = value.uploads.find(p => p.id === idToFeature);
    if (photo && photo.status === 'success') {
        onChange({ ...value, featuredPhotoId: idToFeature });
    }
  };

  // Check if ready to proceed (no uploads pending/uploading)
  const isUploading = value.uploads.some(p => p.status === 'uploading');
  const successfulUploads = value.uploads.filter(p => p.status === 'success');
  const hasMinimumPhotos = successfulUploads.length >= 3; // Base minimum on successful uploads

  // Automatically set the first successful upload as featured if none is set
  useEffect(() => {
    if (!value.featuredPhotoId && successfulUploads.length > 0) {
      onChange({ ...value, featuredPhotoId: successfulUploads[0].id });
    }
  }, [successfulUploads.length, value.featuredPhotoId]); // Depend on count and current featured ID


  const isValid = () => {
    return hasMinimumPhotos && !isUploading; // Must have minimum successful uploads and none currently uploading
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (isValid()) onNext();
  };

   // Cleanup object URLs on component unmount
   useEffect(() => {
    return () => {
      value.uploads.forEach(upload => URL.revokeObjectURL(upload.previewUrl));
    };
  }, []); // Empty dependency array means this runs only on unmount

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-3">
        <Camera className="w-8 h-8 text-blue-400" />
        <div>
          <h2 className="text-2xl font-bold text-white/90">Photos & Media</h2>
          <p className="text-white/60">Upload photos and add media links (minimum 3 successful uploads)</p>
          {isUploading && <p className="text-yellow-400 text-sm animate-pulse">Photos are uploading...</p>}
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-3">
          <p className="text-white/90">Upload Photos</p>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          {value.uploads.map((photoInfo) => (
            <div
              key={photoInfo.id}
              className="relative aspect-square group border border-white/10 rounded-xl overflow-hidden" // Added border/overflow
            >
              <img
                src={photoInfo.previewUrl}
                alt={`Upload preview ${photoInfo.file.name}`}
                className={`w-full h-full object-cover transition-opacity ${photoInfo.status === 'uploading' ? 'opacity-50' : ''}`}
              />
              {/* Status Indicator Overlay */}
               <div className={`absolute inset-0 flex items-center justify-center transition-colors duration-300
                 ${photoInfo.status === 'uploading' ? 'bg-black/60' : ''}
                 ${photoInfo.status === 'error' ? 'bg-red-900/70' : ''}
               `}>
                {photoInfo.status === 'uploading' && <Loader2 className="w-8 h-8 text-blue-300 animate-spin" />}
                {photoInfo.status === 'error' && <AlertCircle className="w-8 h-8 text-red-300" />}
                {/* Success is indicated by lack of overlay */}
              </div>


              {/* Overlay for actions (only show if not uploading) */}
              {photoInfo.status !== 'uploading' && (
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent opacity-0 group-hover:opacity-100
                             transition-opacity rounded-xl flex items-end justify-center p-2 gap-2">
                  {photoInfo.status === 'success' && ( // Only allow featuring successful uploads
                    <button
                      type="button"
                      onClick={() => setFeaturedPhoto(photoInfo.id)}
                      title="Set as Featured"
                      className={`p-2 rounded-full transition-colors backdrop-blur-sm
                        ${photoInfo.id === value.featuredPhotoId
                          ? 'bg-blue-500/80 text-white'
                          : 'bg-black/50 text-white/90 hover:bg-black/70'}`}
                    >
                      <Star className="w-4 h-4" />
                    </button>
                  )}
                  <button
                    type="button"
                    onClick={() => removePhoto(photoInfo.id)}
                    title="Remove Photo"
                    className="p-2 bg-black/50 rounded-full text-white/90 hover:bg-black/70 transition-colors backdrop-blur-sm"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              )}

              {/* Featured Badge */}
              {photoInfo.id === value.featuredPhotoId && photoInfo.status === 'success' && (
                <div className="absolute top-2 left-2 px-2 py-0.5 bg-blue-500/90 rounded-full
                             text-white text-[10px] font-medium backdrop-blur-sm">
                  Featured
                </div>
              )}

              {/* Error Message */}
              {photoInfo.status === 'error' && (
                 <div className="absolute bottom-0 left-0 right-0 p-1 bg-red-900/80">
                    <p className="text-red-200 text-xs text-center truncate" title={photoInfo.error}>
                        Error: {photoInfo.error?.substring(0, 50) || 'Upload Failed'}
                        {photoInfo.error && photoInfo.error.length > 50 ? '...' : ''}
                    </p>
                 </div>
              )}
            </div>
          ))}

          {/* Add Button */}
          <button
            type="button" // Prevent form submission
            onClick={() => fileInputRef.current?.click()}
            disabled={isUploading} // Disable adding more while uploads are in progress
            className="aspect-square glass-card flex flex-col items-center justify-center gap-3 disabled:opacity-50 disabled:cursor-not-allowed hover:border-blue-400/50 transition-colors"
          >
            <Upload className="w-8 h-8 text-blue-400" />
            <span className="text-white/90 text-sm">Add Photos</span>
          </button>
          </div>
        </div>

        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          multiple
          onChange={handleFileChange}
          className="hidden"
        />

        {/* Virtual Tour URL */}
        <div className="space-y-3">
          <p className="text-white/90">Virtual Tour URL (optional)</p>
          <div className={`glass-card flex items-center gap-3 p-4 transition-all duration-200
            ${focusedField === 'virtualTour' ? 'border-blue-400 shadow-[0_0_30px_rgba(59,130,246,0.2)]' : ''}`}>
            <ImageIcon className="w-6 h-6 text-blue-400" />
            <input
              type="url"
              value={value.virtualTourUrl || ''}
              onChange={(e) => onChange({ ...value, virtualTourUrl: e.target.value })}
              onFocus={() => setFocusedField('virtualTour')}
              onBlur={() => setFocusedField(null)}
              placeholder="Enter virtual tour URL"
              className="flex-1 bg-transparent border-none outline-none text-white/90 placeholder-white/40"
            />
          </div>
        </div>

        {/* Video URL */}
        <div className="space-y-3">
          <p className="text-white/90">Property Video URL (optional)</p>
          <div className={`glass-card flex items-center gap-3 p-4 transition-all duration-200
            ${focusedField === 'video' ? 'border-blue-400 shadow-[0_0_30px_rgba(59,130,246,0.2)]' : ''}`}>
            <Video className="w-6 h-6 text-blue-400" />
            <input
              type="url"
              value={value.videoUrl || ''}
              onChange={(e) => onChange({ ...value, videoUrl: e.target.value })}
              onFocus={() => setFocusedField('video')}
              onBlur={() => setFocusedField(null)}
              placeholder="Enter video URL (YouTube, Vimeo, etc.)"
              className="flex-1 bg-transparent border-none outline-none text-white/90 placeholder-white/40"
            />
          </div>
        </div>

        {/* Next Button */}
        <button
          type="submit"
          disabled={!isValid()}
          className="w-full mt-6 py-4 px-6 bg-blue-500/90 hover:bg-blue-500
                     text-white font-medium rounded-xl transition-all duration-200
                     hover:shadow-[0_0_30px_rgba(59,130,246,0.3)]
                     disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next: Review Listing
          </button>
      </form>
    </div>
  );
};

export default PhotosMediaStep;